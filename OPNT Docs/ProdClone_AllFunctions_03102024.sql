-- ALL FUNCTIONS

DELIMITER //
DROP FUNCTION IF EXISTS bringCartDate //
CREATE FUNCTION `bringCartDate`(UID INT, TID INT) RETURNS date
READS SQL DATA
BEGIN

/* 04/25/2020 AST: Rebuilt: Removed the @ from the var CART_DATE 
 SELECT bringCartDate(UID INT, TID INT) */

  DECLARE CART_DATE DATE ;

SET CART_DATE = (SELECT Q1.CART_DATE FROM (
   SELECT OUC.USERID, OUC.TOPICID, MAX(DATE(OUC.CREATION_DTM)) CART_DATE FROM OPN_USER_CARTS OUC
WHERE USERID = UID AND TOPICID = TID
GROUP BY USERID, TOPICID ) Q1);
  RETURN CART_DATE;

END //
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringCommentCountALL $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringCommentCountALL`(UUID VARCHAR(45),  postID INT) RETURNS int
READS SQL DATA
BEGIN

/*  05/03/2020 AST: Post COunt after rebuild of getPostsByUserNameALL 
	05/30/2020 AST: Removing deleted comments 
        	05/30/2020 AST: Removing parent comments that are outside the network


*/

  DECLARE CommentCOUNT, UID, TID INT ;
  
  SET UID = (SELECT USERID FROM OPN_USERLIST WHERE USER_UUID = UUID) ;
  SET TID = (SELECT MAX(TOPICID) FROM OPN_POST_COMMENTS WHERE CAUSE_POST_ID = postID) ;

SET CommentCOUNT = (SELECT COUNT(1) FROM 
OPN_POST_COMMENTS P, (
SELECT DISTINCT B.TOPICID, B.USERID IN_NW_UID  FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1
WHERE C1.TOPICID = TID AND C1.USERID = UID) A ,
(SELECT C2.USERID, C2.TOPICID, C2.CART, C2.KEYID FROM OPN_USER_CARTS C2
WHERE C2.TOPICID = TID  
AND C2.USERID NOT IN (SELECT OUA.ON_USERID FROM OPN_USER_USER_ACTION OUA
WHERE OUA.TOPICID = TID AND OUA.BY_USERID = UID AND OUA.ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.KEYID = B.KEYID  ) NW1
WHERE P.COMMENT_BY_USERID = NW1.IN_NW_UID AND P.TOPICID = NW1.TOPICID
AND P.CAUSE_POST_ID = postID AND P.COMMENT_DELETE_FLAG <> 'Y');

  RETURN CommentCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringCommentCountANTI $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringCommentCountANTI`(UUID VARCHAR(45),  postID INT) RETURNS int
READS SQL DATA
BEGIN

/* 05/03/2020 AST: Post COunt after rebuild of getPostsByUserNameALL 
	05/30/2020 AST: Removing deleted comments 
        	05/30/2020 AST: Removing parent comments that are outside the network
            06/18/2020 AST: Added AND A.CART <> B.CART for the ANTI

*/

  DECLARE CommentCOUNT, UID, TID INT ;
  
  SET UID = (SELECT USERID FROM OPN_USERLIST WHERE USER_UUID = UUID) ;
  SET TID = (SELECT MAX(TOPICID) FROM OPN_POST_COMMENTS WHERE CAUSE_POST_ID = postID) ;

SET CommentCOUNT = (SELECT COUNT(1) FROM 
OPN_POST_COMMENTS P, (
SELECT DISTINCT B.TOPICID, B.USERID IN_NW_UID  FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1
WHERE C1.TOPICID = TID AND C1.USERID = UID) A ,
(SELECT C2.USERID, C2.TOPICID, C2.CART, C2.KEYID FROM OPN_USER_CARTS C2
WHERE C2.TOPICID = TID  
AND C2.USERID NOT IN (SELECT OUA.ON_USERID FROM OPN_USER_USER_ACTION OUA
WHERE OUA.TOPICID = TID AND OUA.BY_USERID = UID AND OUA.ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.KEYID = B.KEYID AND A.CART <> B.CART ) NW1
WHERE P.COMMENT_BY_USERID = NW1.IN_NW_UID AND P.TOPICID = NW1.TOPICID
AND P.CAUSE_POST_ID = postID AND P.COMMENT_DELETE_FLAG <> 'Y' );

  RETURN CommentCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringCommentCountNW $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringCommentCountNW`(UUID VARCHAR(45),  postID INT) RETURNS int
READS SQL DATA
BEGIN

/* 05/03/2020 AST: Post COunt after rebuild of getPostsByUserNameALL 
	05/30/2020 AST: Removing deleted comments 
        	05/30/2020 AST: Removing parent comments that are outside the network

*/

  DECLARE CommentCOUNT, UID, TID INT ;
  
  SET UID = (SELECT USERID FROM OPN_USERLIST WHERE USER_UUID = UUID) ;
  SET TID = (SELECT MAX(TOPICID) FROM OPN_POST_COMMENTS WHERE CAUSE_POST_ID = postID) ;

SET CommentCOUNT = (SELECT COUNT(1) FROM 
OPN_POST_COMMENTS P, (
SELECT DISTINCT B.TOPICID, B.USERID IN_NW_UID  FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1
WHERE C1.TOPICID = TID AND C1.USERID = UID) A ,
(SELECT C2.USERID, C2.TOPICID, C2.CART, C2.KEYID FROM OPN_USER_CARTS C2
WHERE C2.TOPICID = TID  
AND C2.USERID NOT IN (SELECT OUA.ON_USERID FROM OPN_USER_USER_ACTION OUA
WHERE OUA.TOPICID = TID AND OUA.BY_USERID = UID AND OUA.ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.KEYID = B.KEYID AND A.CART = B.CART ) NW1
WHERE P.COMMENT_BY_USERID = NW1.IN_NW_UID AND P.TOPICID = NW1.TOPICID
AND P.CAUSE_POST_ID = postID AND P.COMMENT_DELETE_FLAG <> 'Y' );

  RETURN CommentCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringKWByKID $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringKWByKID`(KID INT) RETURNS varchar(60) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/*

05/26/2020 AST: This Function is used in the  OPN_USER_BHV_LOG of addSearchKwToCart

Hence it is a part of regular functions

*/

  DECLARE kw varchar(60) ;

SET kw = (SELECT MAX(KEYWORDS) FROM OPN_P_KW WHERE KEYID = KID);

  RETURN kw;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringPostCCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringPostCCount`(postid INT) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: Removed the @ from the var PostCCOUNT 
 SELECT bringPostCCount(postid INT) */

  DECLARE PostCCOUNT INT ;

SET PostCCOUNT = (SELECT COUNT(*) FROM OPN_POST_COMMENTS OPC 
WHERE OPC.CAUSE_POST_ID = postid AND OPC.CLEAN_COMMENT_FLAG = 'Y');
  RETURN PostCCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringPostCountALL $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringPostCountALL`(UUID VARCHAR(45),  TID INT) RETURNS int
BEGIN

/* 05/03/2020 AST: Post COunt after rebuild of getPostsByUserNameALL */

  DECLARE PostCOUNT, UID INT ;
  
  SET UID = (SELECT USERID FROM OPN_USERLIST WHERE USER_UUID = UUID) ;

SET PostCOUNT = (SELECT COUNT(1) FROM 
OPN_POSTS P, (
SELECT DISTINCT B.TOPICID, B.USERID IN_NW_UID  FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1
WHERE C1.TOPICID = TID AND C1.USERID = UID) A ,
(SELECT C2.USERID, C2.TOPICID, C2.CART, C2.KEYID FROM OPN_USER_CARTS C2
WHERE C2.TOPICID = TID  
AND C2.USERID NOT IN (SELECT OUA.ON_USERID FROM OPN_USER_USER_ACTION OUA
WHERE OUA.TOPICID = TID AND OUA.BY_USERID = UID AND OUA.ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.KEYID = B.KEYID  ) NW1
WHERE P.POST_BY_USERID = NW1.IN_NW_UID AND P.TOPICID = NW1.TOPICID
AND P.POST_DATETIME > CURRENT_DATE() - INTERVAL 1 MONTH);

  RETURN PostCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringPostCountANTI $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringPostCountANTI`(UUID VARCHAR(45),  TID INT) RETURNS int
BEGIN

/* 05/03/2020 AST: Post COunt after rebuild of getPostsByUserNameNW 
	06/18/2020 AST: ANTI counts 
    
    	07/12/2020 AST: Added the changes needed to handle the BOT posts */
        
/* 	11/08/2020 AST: Now the non-clean posts are being changed to a standard warning replacement. 
	Hence, removing the filter AND CLEAN_POST_FLAG = 'Y' from all cases below */

  DECLARE PostCOUNT, UID INT ;
  DECLARE CCODE VARCHAR(5) ;
  
  SELECT USERID, COUNTRY_CODE INTO UID, CCODE FROM OPN_USERLIST WHERE USER_UUID = UUID ;

SET PostCOUNT = (SELECT COUNT(1)
FROM OPN_POSTS P
, (SELECT DISTINCT B.USERID, B.BOT_FLAG, A.TOPICID FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 
WHERE C1.USERID = UID) A ,
(SELECT C2.USERID, CU.BOT_FLAG, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM 
FROM OPN_USER_CARTS C2, OPN_USERLIST CU WHERE C2.USERID = CU.USERID AND
 C2.USERID NOT IN (SELECT OUUA.ON_USERID FROM OPN_USER_USER_ACTION OUUA 
 WHERE OUUA.BY_USERID = UID 
AND OUUA.TOPICID = TID AND OUUA.ACTION_TYPE = 'KO')) B 
WHERE A.TOPICID = B.TOPICID AND A.CART <> B.CART 
AND A.KEYID = B.KEYID AND A.TOPICID = TID ) UN
WHERE UN.USERID = P.POST_BY_USERID
AND P.POST_DATETIME > CURRENT_DATE() - INTERVAL 30 DAY
AND UN.TOPICID = P.TOPICID
AND (P.TAG1_KEYID IS NULL OR P.TAG1_KEYID IN 
(SELECT KK.KEYID FROM OPN_USER_CARTS KK WHERE KK.USERID = UID))
AND ( -- P.CLEAN_POST_FLAG = 'Y' AND 
(CASE WHEN UN.BOT_FLAG = 'Y' 
THEN  P.POSTOR_COUNTRY_CODE IN ( CCODE, 'GGG' ) ELSE P.POSTOR_COUNTRY_CODE NOT IN ('PQR')  END ) ));

  RETURN PostCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringPostCountNW $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringPostCountNW`(UUID VARCHAR(45),  TID INT) RETURNS int
BEGIN

/* 05/03/2020 AST: Post COunt after rebuild of getPostsByUserNameNW 

	07/12/2020 AST: Added the changes needed to handle the BOT posts */
    
/* 	11/08/2020 AST: Now the non-clean posts are being changed to a standard warning replacement. 
	Hence, removing the filter AND CLEAN_POST_FLAG = 'Y' from all cases below */

  DECLARE PostCOUNT, UID INT ;
  DECLARE CCODE VARCHAR(5) ;
  
  SELECT USERID, COUNTRY_CODE INTO UID, CCODE FROM OPN_USERLIST WHERE USER_UUID = UUID ;

SET PostCOUNT = (SELECT COUNT(1)
FROM OPN_POSTS P
, (SELECT DISTINCT B.USERID, B.BOT_FLAG, A.TOPICID FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 
WHERE C1.USERID = UID) A ,
(SELECT C2.USERID, CU.BOT_FLAG, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM 
FROM OPN_USER_CARTS C2, OPN_USERLIST CU WHERE C2.USERID = CU.USERID AND
 C2.USERID NOT IN (SELECT OUUA.ON_USERID FROM OPN_USER_USER_ACTION OUUA 
 WHERE OUUA.BY_USERID = UID 
AND OUUA.TOPICID = TID AND OUUA.ACTION_TYPE = 'KO')) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART 
AND A.KEYID = B.KEYID AND A.TOPICID = TID ) UN
WHERE UN.USERID = P.POST_BY_USERID
AND P.POST_DATETIME > CURRENT_DATE() - INTERVAL 30 DAY
AND UN.TOPICID = P.TOPICID
AND (P.TAG1_KEYID IS NULL OR P.TAG1_KEYID IN 
(SELECT KK.KEYID FROM OPN_USER_CARTS KK WHERE KK.USERID = UID))
AND ( -- P.CLEAN_POST_FLAG = 'Y' AND 
(CASE WHEN UN.BOT_FLAG = 'Y' 
THEN  P.POSTOR_COUNTRY_CODE IN ( CCODE, 'GGG' ) ELSE P.POSTOR_COUNTRY_CODE NOT IN ('PQR')  END ) ));

  RETURN PostCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringPostHCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringPostHCount`(postid INT) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: Removed the @ from the var PostHCOUNT 
 SELECT bringPostHCount(postid INT) */

  DECLARE PostHCOUNT INT ;

SET PostHCOUNT = (SELECT COUNT(DISTINCT OPA.ACTION_BY_USERID) 
FROM OPN_USER_POST_ACTION OPA 
WHERE OPA.CAUSE_POST_ID = postid AND OPA.POST_ACTION_TYPE = 'H');
  RETURN PostHCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringPostLCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringPostLCount`(postid INT) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: Removed the @ from the var PostlCOUNT 
 SELECT bringPostHlount(postid INT) */

  DECLARE PostLCOUNT INT ;

SET PostLCOUNT = (SELECT COUNT(DISTINCT OPA.ACTION_BY_USERID) 
FROM OPN_USER_POST_ACTION OPA 
WHERE OPA.CAUSE_POST_ID = postid AND OPA.POST_ACTION_TYPE = 'L');
  RETURN PostLCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringTK1Count $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringTK1Count`(KID INT) RETURNS int
BEGIN

/*05/ */

  DECLARE PostLCOUNT INT ;

SET PostLCOUNT = (SELECT COUNT(1) 
FROM OPN_POSTS P WHERE P.TAG1_KEYID = KID) ;
  RETURN PostLCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringTopicfromTID $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringTopicfromTID`(tid INT) RETURNS varchar(60) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/* 01/05/2021 AST: Built for easily bringing Topic Name without a join with OPN_TOPICS */

  DECLARE tName varchar(60) ;

SET tName = (SELECT T.TOPIC FROM OPN_TOPICS T WHERE T.TOPICID = tid);

  RETURN tName;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUserid $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUserid`(UserUUID VARCHAR(45)) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: Removed the @ from the var Uuserid 
 SELECT bringUserid(UserUUID VARCHAR(45)) */

  DECLARE Uuserid INT ;

SET Uuserid = (SELECT U.USERID FROM OPN_USERLIST U WHERE U.USER_UUID = UserUUID);

  RETURN Uuserid;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUseridFromUsername $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUseridFromUsername`(username VARCHAR(30)) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: Removed the @ from the var Uuserid 
 SELECT bringUseridFromUsername(username VARCHAR(30)) */

  DECLARE Uuserid INT ;

SET Uuserid = (SELECT OU.USERID FROM OPN_USERLIST OU 
WHERE UPPER(OU.USERNAME) = UPPER(username));

  RETURN Uuserid;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUsernameByUID $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUsernameByUID`(UID INT) RETURNS varchar(40) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT bringUsernameByUID(UID INT) */

  DECLARE uname varchar(40) ;

SET uname = (SELECT USERNAME FROM OPN_USERLIST WHERE USERID = UID);

  RETURN uname;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUsernameByUUID $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUsernameByUUID`(UserUUID VARCHAR(45)) RETURNS varchar(40) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT bringUsernameByUUID(UserUUID VARCHAR(45)) */

  DECLARE uname varchar(40) ;

SET uname = (SELECT USERNAME FROM OPN_USERLIST WHERE USER_UUID = UserUUID);

  RETURN uname;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUserPostAction $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUserPostAction`(UID INT, PID INT) RETURNS varchar(3) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT bringUserPostAction(UID INT, PID INT) -- PID = CAUSE_POST_ID */

  DECLARE UPAction VARCHAR(3) ;

SET UPAction = (SELECT POST_ACTION_TYPE FROM OPN_USER_POST_ACTION 
WHERE ACTION_BY_USERID = UID AND CAUSE_POST_ID = PID);

  RETURN UPAction;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUTYPE $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUTYPE`(TBUID INT) RETURNS varchar(10) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT bringUTYPE(TBUID INT) 
 This function is not being called anywhere - hence deprecated */

  DECLARE UTYPE VARCHAR(10) ;

SET UTYPE := (SELECT USER_TYPE FROM OPN_USERLIST WHERE USERID = TBUID);

  RETURN UTYPE;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS bringUUID $$
CREATE DEFINER=`opinito`@`%` FUNCTION `bringUUID`(UID INT) RETURNS varchar(45) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT bringUUID(UID INT) */

  DECLARE userUUID VARCHAR(45) ;

SET userUUID := (SELECT USER_UUID FROM OPN_USERLIST WHERE USERID = UID);

  RETURN userUUID;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS doesCartExist $$
CREATE DEFINER=`opinito`@`%` FUNCTION `doesCartExist`(username varchar(30)) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT doesCartExist(username varchar(30)) */

  DECLARE CARTEXIST INT ;

SET CARTEXIST =  (SELECT EXISTS (SELECT * FROM OPN_USER_CARTS 
 WHERE USERID = (SELECT OU.USERID FROM OPN_USERLIST OU 
 WHERE UPPER(OU.USERNAME) = UPPER(username))) CARTORNOT);
 
  RETURN CARTEXIST;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS getALLNWCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `getALLNWCount`(UID INT, TID INT) RETURNS int
BEGIN

/* 06/20/2018 AST: Changed the NW algo to the newer one 
   04/25/2020 AST: ADDED CKO TO ACTION_TYPE */

  DECLARE ALLNCOUNT INT ;
 
   SET ALLNCOUNT = (SELECT COUNT(DISTINCT B.USERID)  FROM
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS WHERE TOPICID = TID AND USERID = UID) A ,
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS WHERE TOPICID = TID AND USERID <> UID 
AND USERID NOT IN (SELECT ON_USERID FROM OPN_USER_USER_ACTION 
WHERE TOPICID = TID AND BY_USERID = UID AND ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.KEYID = B.KEYID )
 ;

  RETURN ALLNCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS getALLPCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `getALLPCount`(UID INT, TID INT) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
this proc was still using the old network algo - changed it to the new
 SELECT getALLPCount(UID INT, TID INT) 
 This function is being created to support the new definition of the network
 now, ALL indicates all the users who have the same keyword/s but may or may not
 match the love/hate (in fact the ALL includes those that are exactly opposite
 
 */

  DECLARE ALLPCOUNT INT ;

  SET ALLPCOUNT = (SELECT COUNT(1) FROM OPN_POSTS P 
  WHERE  P.CLEAN_POST_FLAG = 'Y' AND P.TOPICID = TID
 AND P.POST_BY_USERID IN(
SELECT DISTINCT B.USERID  FROM
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS 
WHERE TOPICID = TID AND USERID = UID) A ,
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS 
WHERE TOPICID = TID -- AND USERID <> UID 
AND USERID NOT IN (SELECT ON_USERID FROM OPN_USER_USER_ACTION 
WHERE TOPICID = TID AND BY_USERID = UID AND ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.KEYID = B.KEYID
) 

);

  RETURN ALLPCOUNT;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS getKOCountBYUIDTID $$
CREATE DEFINER=`opinito`@`%` FUNCTION `getKOCountBYUIDTID`(UID INT, TID INT) RETURNS int
BEGIN

/* 06/20/2018 AST: brings the count of kicked out users by this user by topicid */

  DECLARE KOCOUNT INT ;
 
   SET KOCOUNT = (SELECT COUNT(DISTINCT ON_USERID)  FROM
OPN_USER_USER_ACTION WHERE BY_USERID = UID AND TOPICID = TID AND ACTION_TYPE = 'KO');

  RETURN KOCOUNT;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS getlikemindedcount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `getlikemindedcount`(uuid varchar(45), topicid varchar(20)) RETURNS int
BEGIN

/* 08/23/2020 AST: Being copied as part of clean-up - not sure if this function is 
	actually used any more */

DECLARE userid INT;
DECLARE count INT;
SET userid= (SELECT bringUserid(uuid));

SET count = (select getNetworkCount(userid,topicid));

  RETURN count;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS getNetworkCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `getNetworkCount`(UID INT, TID INT) RETURNS int
BEGIN

/* 06/20/2018 AST: Changed the NW algo to the newer one 
   04/25/2020 AST: ADDED CKO TO ACTION_TYPE */

  DECLARE NCOUNT INT ;
 
   SET NCOUNT = (SELECT COUNT(DISTINCT B.USERID)  FROM
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS WHERE TOPICID = TID AND USERID = UID) A ,
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS WHERE TOPICID = TID AND USERID <> UID 
AND USERID NOT IN (SELECT ON_USERID FROM OPN_USER_USER_ACTION 
WHERE TOPICID = TID AND BY_USERID = UID AND ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID )
 ;

  RETURN NCOUNT;
  
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS getNWPCount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `getNWPCount`(UID INT, TID INT) RETURNS int
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
this proc was still using the old network algo - changed it to the new
 SELECT getNWPCount(UID INT, TID INT) */

  DECLARE NWPCOUNT INT ;

  SET NWPCOUNT = (SELECT COUNT(1) FROM OPN_POSTS P 
  WHERE  P.CLEAN_POST_FLAG = 'Y' AND P.TOPICID = TID
 AND P.POST_BY_USERID IN(
SELECT DISTINCT B.USERID  FROM
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS 
WHERE TOPICID = TID AND USERID = UID) A ,
(SELECT USERID, TOPICID, CART, KEYID FROM OPN_USER_CARTS 
WHERE TOPICID = TID -- AND USERID <> UID 
AND USERID NOT IN (SELECT ON_USERID FROM OPN_USER_USER_ACTION 
WHERE TOPICID = TID AND BY_USERID = UID AND ACTION_TYPE IN ('KO', 'CKO'))
) B
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID
) 

);

  RETURN NWPCOUNT;
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS removeAlpha $$
CREATE DEFINER=`opinito`@`%` FUNCTION `removeAlpha`( str VARCHAR(60) ) RETURNS varchar(60) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
    DETERMINISTIC
BEGIN 


/* SELECT UPPER(removeAlpha('T$RU&M P &F9UcKS AND gra b&& s pu$$ ssi%s') );

= TRUMPFUCKSANDGRABSPUSSIS 

This function will be used in making sure that users 
are not masking their curse words with non-alpha chars */

  DECLARE i, len SMALLINT DEFAULT 1; 
  DECLARE ret CHAR(255) DEFAULT ''; 
  DECLARE c CHAR(1); 
  SET len = CHAR_LENGTH( str ); 
  REPEAT 
    BEGIN 
      SET c = MID( str, i, 1 ); 
 --     IF c REGEXP '[[:alnum:]]' THEN 
            IF c REGEXP '[[:alpha:]]' THEN 
        SET ret=CONCAT(ret,c); 
      END IF; 
      SET i = i + 1; 
    END; 
  UNTIL i > len END REPEAT; 
  RETURN ret; 
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS replaceNonAlpha $$
CREATE DEFINER=`opinito`@`%` FUNCTION `replaceNonAlpha`( str VARCHAR(60) ) RETURNS varchar(60) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
    DETERMINISTIC
BEGIN 


/* SELECT UPPER(removeAlpha('T$RU&M P &F9UcKS AND gra b&& s pu$$ ssi%s') );

= TRUMPFUCKSANDGRABSPUSSIS 

This function will be used in making sure that users are not masking 
their curse words with non-alpha chars */

  DECLARE i, len SMALLINT DEFAULT 1; 
  DECLARE ret CHAR(255) DEFAULT ''; 
  DECLARE c CHAR(1); 
  SET len = CHAR_LENGTH( str ); 
  REPEAT 
    BEGIN 
      SET c = MID( str, i, 1 ); 
 --     IF c REGEXP '[[:alnum:]]' THEN 
            IF c REGEXP '[[:alnum:]]' THEN 
        SET ret=CONCAT(ret,c); 
        ELSE set c = '*';
        SET ret=CONCAT(ret,c); 
      END IF; 
      SET i = i + 1; 
    END; 
  UNTIL i > len END REPEAT; 
 -- SET ret = (select TRIM(REPLACE(ret, '*', ' ')) );
  RETURN (select TRIM(REPLACE(ret, '*', ' ')) ); 
END$$
DELIMITER ;

-- 

DELIMITER $$
DROP FUNCTION IF EXISTS wordcount $$
CREATE DEFINER=`opinito`@`%` FUNCTION `wordcount`(str TEXT) RETURNS int
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN

/* 04/25/2020 AST: Rebuilt: brought the comment inside the body
 SELECT wordcount(STR TEXT) 
 
 SELECT wordcount('COUNT THE NUMBER OF WORDS IN THIS') = 7
  */

    DECLARE wordCnt, idx, maxIdx INT DEFAULT 0;
    DECLARE currChar, prevChar BOOL DEFAULT 0;
    SET maxIdx=char_length(str);
    WHILE idx < maxIdx DO
        SET currChar=SUBSTRING(str, idx, 1) RLIKE '[[:alnum:]]';
        IF NOT prevChar AND currChar THEN
            SET wordCnt=wordCnt+1;
        END IF;
        SET prevChar=currChar;
        SET idx=idx+1;
    END WHILE;
    RETURN wordCnt;
  END$$
DELIMITER ;

-- 
