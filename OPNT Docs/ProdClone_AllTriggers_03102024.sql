-- POST_NW_NOTIF_TRIGGER

DELIMITER $$
DROP TRIGGER IF EXISTS POST_NW_NOTIF_TRIGGER $$
CREATE TRIGGER POST_NW_NOTIF_TRIGGER
AFTER INSERT ON OPN_POSTS for each row
begin

/* WITHOUT TOKEN EXIST FILTER

INSERT INTO OPN_PUSH_LAUNCH(USERID, USER_UUID, APP_TOKEN, USER_PLATFORM, PUSH_TYPE, PUSH_COUNT)
SELECT USERID, USER_UUID, IDENTIFIER_TOKEN, LAST_USED_PLATFORM, 'POST', 1  FROM OPN_USERLIST WHERE USERID IN 
(SELECT DISTINCT USERID FROM OPN_NC_CLUSTERS WHERE CLUSTER_ID IN 
(SELECT RELATED_CLUSTER_ID FROM OPN_CLUSTER_RELATIONSHIPS WHERE CLUSTER_ID IN 
(SELECT CLUSTER_ID FROM OPN_NC_CLUSTERS WHERE USERID = NEW.POST_BY_USERID AND TOPICID = NEW.TOPICID)));

	06/14/2020 AST: Added WHEN NEW.TOPICID = 11 THEN SET POSTTOPIC = 'Health' ;
    06/17/2020 AST: Fixed the NW to use the true network
    06/25/2020 AST: Added DISTINCT to the NW query
    
    07/14/2020 AST: Adding the INSERT for the post search infra
    07/23/2020 AST: Added POST_BY_UNAME to the search string
    08/27/2020 AST: added SOURCE_ID AND PUSH_TITLE 
    
    08/12/2023 AST: Commenting out the OPN_PUSH_LAUNCH INSERT portion because thetable has become runaway.

*/

DECLARE POSTTOPIC, PBYUNAME VARCHAR(30) ;
DECLARE POST_EXCRPT VARCHAR(150) ;
DECLARE KW VARCHAR(300) ;



CASE WHEN NEW.TOPICID = 1 THEN SET POSTTOPIC = 'Politics' ;
WHEN NEW.TOPICID = 2 THEN SET POSTTOPIC = 'Sports/Games' ;
WHEN NEW.TOPICID = 3 THEN SET POSTTOPIC = 'Science/Tech' ;
WHEN NEW.TOPICID = 4 THEN SET POSTTOPIC = 'Business' ;
WHEN NEW.TOPICID = 5 THEN SET POSTTOPIC = 'Media/Ent.' ;
WHEN NEW.TOPICID = 6 THEN SET POSTTOPIC = 'Religion' ;
WHEN NEW.TOPICID = 7 THEN SET POSTTOPIC = 'Life' ;
WHEN NEW.TOPICID = 8 THEN SET POSTTOPIC = 'Miscellaneous' ;
WHEN NEW.TOPICID = 9 THEN SET POSTTOPIC = 'Trending' ;
WHEN NEW.TOPICID = 10 THEN SET POSTTOPIC = 'Celebrities' ;
WHEN NEW.TOPICID = 11 THEN SET POSTTOPIC = 'Health' ;

END CASE;

SET POST_EXCRPT = (SELECT substring(NEW.POST_CONTENT, 1, 140));

CASE WHEN NEW.TAG1_KEYID IS NULL THEN 

SET KW = NULL ;

WHEN NEW.TAG1_KEYID IS NOT NULL THEN 

SET KW = (SELECT KEYWORDS FROM OPN_P_KW WHERE KEYID = NEW.TAG1_KEYID) ;

END CASE ;

SET PBYUNAME = (SELECT USERNAME FROM OPN_USERLIST WHERE USERID = NEW.POST_BY_USERID) ;

/* Commenting out the OPN_PUSH_LAUNCH INSERT portion because thetable has become runaway. */

INSERT INTO OPN_PUSH_LAUNCH(USERID, USER_UUID, APP_TOKEN, USER_PLATFORM, PUSH_TYPE
, PUSH_COUNT, PUSH_TOPIC, SOURCE_ID, POST_EXCERPT, PUSH_TITLE)
SELECT U.USERID, U.USER_UUID, U.IDENTIFIER_TOKEN, U.LAST_USED_PLATFORM, 'POST'
, 1 , POSTTOPIC, NEW.TOPICID, POST_EXCRPT, 'New post/s added in'
FROM OPN_USERLIST U, ( SELECT DISTINCT B.USERID FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 
WHERE C1.USERID = NEW.POST_BY_USERID AND C1.TOPICID = NEW.TOPICID) A ,
(SELECT C2.USERID, C2.TOPICID, C2.CART, C2.KEYID FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = NEW.TOPICID AND 
C2.USERID NOT IN (SELECT OUUA.ON_USERID FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = NEW.POST_BY_USERID 
AND OUUA.TOPICID = NEW.TOPICID AND OUUA.ACTION_TYPE = 'KO')) B 
WHERE A.CART = B.CART AND A.KEYID = B.KEYID ) NW
WHERE U.IDENTIFIER_TOKEN IS NOT NULL 
AND U.USERID = NW.USERID ;

/* Commenting out the OPN_PUSH_LAUNCH INSERT portion because thetable has become runaway. */

INSERT INTO OPN_POST_SEARCH_T(TOPICID, POST_ID, POST_BY_UID, POST_BY_UNAME, POSTOR_CCODE
, POST_CONTENT, URL_TITLE, TAG1_KEYID, TAG1_KW, SEARCH_STRING, POST_DTM)
VALUES(NEW.TOPICID, NEW.POST_ID, NEW.POST_BY_USERID, PBYUNAME, NEW.POSTOR_COUNTRY_CODE
, NEW.POST_CONTENT, NEW.URL_TITLE, NEW.TAG1_KEYID, KW
, CONCAT(PBYUNAME, '-',IFNULL(KW,''), '-', SUBSTR(NEW.POST_CONTENT, 1, 1000)
, '-', IFNULL(NEW.URL_TITLE, ''))
, NEW.POST_DATETIME) ;




END$$

DELIMITER ;

-- 

-- POST_DELETE

-- TRIGGER TO DELETE POSTS FROM OPN_POSTS

DELIMITER $$
DROP TRIGGER IF EXISTS POST_DELETE $$
CREATE TRIGGER POST_DELETE 
AFTER DELETE ON OPN_POSTS for each row
begin

/*

	07/17/2020 AST: Adding the DELETE from OPN_POST_SEARCH_T to ensure that 
					deleted posts don't show up in search results

*/

DELETE FROM OPN_POST_COMMENTS WHERE OPN_POST_COMMENTS.CAUSE_POST_ID = OLD.POST_ID ;

DELETE FROM OPN_USER_POST_ACTION WHERE OPN_USER_POST_ACTION.CAUSE_POST_ID = OLD.POST_ID ;

DELETE FROM OPN_POST_SEARCH_T WHERE OPN_POST_SEARCH_T.POST_ID = OLD.POST_ID ;

INSERT INTO OPN_POSTS_DELETED(OLD_POST_ID, TOPICID, POST_DATETIME, POST_BY_USERID, POST_CONTENT, EMBEDDED_CONTENT
, TAG1_KEYID, TAG2_KEYID, TAG3_KEYID, CLEAN_POST_FLAG, POST_UPDATE_DTM
, DEMO_POST_FLAG, POSTOR_COUNTRY_CODE, POSTOR_TYPE_TAG, ACTION_TYPE) 
VALUES (OLD.POST_ID, OLD.TOPICID, OLD.POST_DATETIME, OLD.POST_BY_USERID
, OLD.POST_CONTENT, OLD.EMBEDDED_CONTENT, OLD.TAG1_KEYID, OLD.TAG2_KEYID, OLD.TAG3_KEYID, OLD.CLEAN_POST_FLAG, NOW()
, OLD.DEMO_POST_FLAG, OLD.POSTOR_COUNTRY_CODE, OLD.POSTOR_TYPE_TAG, 'D');

END$$

DELIMITER ; 

-- 

-- USER_NETWORK_TRIGGER

DELIMITER $$
DROP TRIGGER IF EXISTS USER_NETWORK_TRIGGER $$
CREATE DEFINER=`opinito`@`%` TRIGGER USER_NETWORK_TRIGGER
AFTER INSERT ON OPN_USERLIST for each row
begin

INSERT INTO OPN_NW_STATS(USERID, USER_UUID, TOPICID, NW_COUNT_T1, NW_COUNT_T2, NWP_COUNT_T1, NWP_COUNT_T2, NW_T1_DTM, NW_T2_DTM)
SELECT U.USERID, U.USER_UUID, T.TOPICID, 0, 0, 0, 0, NOW(), NOW()
FROM OPN_USERLIST U, OPN_TOPICS T
WHERE U.USERID = NEW.USERID ;
-- ORDER BY U.USERID, T.TOPICID;

END$$

DELIMITER ; 

-- 

-- NEW_POST_CLEAN_FLAG

DELIMITER $$
DROP TRIGGER IF EXISTS NEW_POST_CLEAN_FLAG $$
CREATE TRIGGER NEW_POST_CLEAN_FLAG 
AFTER INSERT ON OPN_POSTS_RAW for each row
begin

/*
-- THE LOGIC IS AS FOLLOWS: IF THERE IS NO EMBEDDED CONTENT (URL) IN THE 
POST THEN WE AUTOMATICALLY DEEM THE POST TO BE CLEAN

-- IF THE EMBEDDED CONTENT IS THERE (THAT MEANS THE POST CONTAINS SOME URL LINK/S) 
THEN WE AUTOMATICALLY DEEM THE POST TO BE NON-CLEAN
-- AND THEN WE CALL THE CLEAN_POST_FLG PROC TO DECIDE IF THE EMBEDDED CONETNT IS CLEAN OR NOT.

-- HENCE THE ELSE INSERT HAS CLEAN_POST_FLAG = 'N' AND POST_PROOCESSED_FLAG = 'N'
-- CLEAN_POST_FLAG WILL BE TURNED INTO 'Y' OR REMAIN 'N' BASED ON THE DECISION 
FROM THE CLEAN_POST_FLG PROC
-- IN EITHER CASE, THEN CLEAN_POST_FLG PROC WILL TURN THE POST_PROCESSED_FLAG = 'Y' 
AFTER IT IS DONE PROCESSING THIS POST

-- CHANGE LOG
-- AT 04062017 ADDED POST_UPDATE_DTM (= POST_DATETIME) TO INSERT STATEMENTS
-- AT 01312018 ADDED TAG1_KEYID TO INSERT STATEMENT

04/17/2019 AST: Added STP_PROC_NAME column to the INSERT
04/09/2020 AST: Added MEDIA_CONTENT, MEDIA_FLAG

05/10/2020 AST:  Added DEMO_POST_FLAG
06/15/2020 AST: Trying to remove the UPDATE for country code

10/20/2023 AST: Adding the new columns (NEW.SCRAPE_SOURCE, NEW.SCRAPE_TYPE) in the POST tables in the update/insert statement
 
 */
 

 IF NEW.EMBEDDED_FLAG = 'N' THEN 
INSERT INTO OPN_POSTS(POST_ID, TOPICID, POST_DATETIME, POST_UPDATE_DTM, POSTOR_COUNTRY_CODE
, POST_BY_USERID, POST_CONTENT, DEMO_POST_FLAG, EMBEDDED_CONTENT, EMBEDDED_FLAG
, CLEAN_POST_FLAG, POST_PROCESSED_FLAG, POST_PROCESSED_DTM, SCRAPE_ROW_ID, URL_TITLE
, TAG1_KEYID, STP_PROC_NAME, MEDIA_CONTENT, MEDIA_FLAG, SCRAPE_SOURCE, SCRAPE_TYPE)
VALUES(NEW.POST_ID, NEW.TOPICID, NEW.POST_DATETIME, NEW.POST_DATETIME, NEW.POSTOR_COUNTRY_CODE
, NEW.POST_BY_USERID, NEW.POST_CONTENT, NEW.DEMO_POST_FLAG, NULL, 'N'
, 'Y', 'Y', NOW(), NEW.SCRAPE_ROW_ID, NEW.URL_TITLE
, NEW.TAG1_KEYID, NEW.STP_PROC_NAME, NEW.MEDIA_CONTENT, NEW.MEDIA_FLAG, NEW.SCRAPE_SOURCE, NEW.SCRAPE_TYPE);
-- 032717 ADDING POSTOR_COUNTRY_CODE UPDATE STMNT
/*UPDATE OPN_POSTS OP SET OP.POSTOR_COUNTRY_CODE = 
(SELECT COUNTRY_CODE FROM OPN_USERLIST WHERE USERID = NEW.POST_BY_USERID) 
WHERE OP.POST_ID = NEW.POST_ID; */

ELSE 
INSERT INTO OPN_POSTS(POST_ID, TOPICID, POST_DATETIME, POST_UPDATE_DTM, POSTOR_COUNTRY_CODE
, POST_BY_USERID, POST_CONTENT, DEMO_POST_FLAG, EMBEDDED_CONTENT, EMBEDDED_FLAG
, CLEAN_POST_FLAG, POST_PROCESSED_FLAG, POST_PROCESSED_DTM, SCRAPE_ROW_ID, URL_TITLE
, TAG1_KEYID, STP_PROC_NAME, MEDIA_CONTENT, MEDIA_FLAG, SCRAPE_SOURCE, SCRAPE_TYPE)
VALUES(NEW.POST_ID, NEW.TOPICID, NEW.POST_DATETIME, NEW.POST_DATETIME, NEW.POSTOR_COUNTRY_CODE
, NEW.POST_BY_USERID, NEW.POST_CONTENT, NEW.DEMO_POST_FLAG, NEW.EMBEDDED_CONTENT, 'Y'
, 'N', 'N', NOW(), NEW.SCRAPE_ROW_ID, NEW.URL_TITLE
, NEW.TAG1_KEYID, NEW.STP_PROC_NAME, NEW.MEDIA_CONTENT, NEW.MEDIA_FLAG, NEW.SCRAPE_SOURCE, NEW.SCRAPE_TYPE);
-- 032717 ADDING POSTOR_COUNTRY_CODE UPDATE STMNT
/*UPDATE OPN_POSTS OP SET OP.POSTOR_COUNTRY_CODE = 
(SELECT COUNTRY_CODE FROM OPN_USERLIST WHERE USERID = NEW.POST_BY_USERID) 
WHERE OP.POST_ID = NEW.POST_ID; */

CALL CLEAN_POST_FLG(NEW.POST_ID);
END IF;


END$$

DELIMITER ;

-- 

-- POST_UPDATE

-- TRIGGER TO UPDATE POSTS ON OPN_POSTS_RAW

/* 04/09/2020 AST: Added MEDIA_CONTENT = NEW.MEDIA_CONTENT
, MEDIA_FLAG = NEW.MEDIA_FLAG to handle the new media fields 

05/15/2021 AST: Adding TAG1_KEYID and STP_PROC_NAME to UPDATE. This is for the retagPost proc

08/09/2021 AST: Added TOPICID to UPDATE list

*/

DELIMITER $$
DROP TRIGGER IF EXISTS POST_UPDATE $$
CREATE TRIGGER POST_UPDATE 
AFTER UPDATE ON OPN_POSTS_RAW for each row
begin

IF NEW.EMBEDDED_FLAG = 'N' THEN

UPDATE OPN_POSTS SET POST_CONTENT = NEW.POST_CONTENT, MEDIA_CONTENT = NEW.MEDIA_CONTENT
, MEDIA_FLAG = NEW.MEDIA_FLAG
, EMBEDDED_CONTENT = NULL
, EMBEDDED_FLAG = 'N', CLEAN_POST_FLAG = 'Y'
, POST_UPDATE_DTM = NOW(), POST_PROCESSED_FLAG = 'Y'
, TAG1_KEYID = NEW.TAG1_KEYID, STP_PROC_NAME = NEW.STP_PROC_NAME
, TOPICID = NEW.TOPICID
, POST_PROCESSED_DTM = NOW() WHERE POST_ID = OLD.POST_ID; 

ELSE

UPDATE OPN_POSTS SET POST_CONTENT = NEW.POST_CONTENT, MEDIA_CONTENT = NEW.MEDIA_CONTENT
, MEDIA_FLAG = NEW.MEDIA_FLAG
, EMBEDDED_CONTENT = NEW.EMBEDDED_CONTENT
, EMBEDDED_FLAG = 'Y', CLEAN_POST_FLAG = 'N'
, POST_UPDATE_DTM = NOW(), POST_PROCESSED_FLAG = 'N'
, TAG1_KEYID = NEW.TAG1_KEYID, STP_PROC_NAME = NEW.STP_PROC_NAME
, TOPICID = NEW.TOPICID
, POST_PROCESSED_DTM = NOW() WHERE POST_ID = OLD.POST_ID; 

CALL CLEAN_POST_FLG(OLD.POST_ID);
END IF;

END$$

DELIMITER ; 

-- 

-- NEW_COMMENT_CLEAN_FLAG

DELIMITER $$
DROP TRIGGER IF EXISTS NEW_COMMENT_CLEAN_FLAG $$
CREATE DEFINER=`opinito`@`%` TRIGGER NEW_COMMENT_CLEAN_FLAG 
AFTER INSERT ON OPN_POST_COMMENTS_RAW for each row
begin

/* -- CHANGE LOG

-- AT 04062017 ADDED COMMENT_UPDATE_DTM IN INSERT STATEMENTS

04252018 AST: adding the portion for updating the POST_UPDATE_DTM whenever a comment is added on a post
Similar code will have to be added to the COMMENT_UPDATE proc. But that is going to be more complicated

04/25/2020 AST: Adding media_content AND media_flag to the trigger

04/27/2020 AST: Added PARENT_COMMENT_CONTENT
, PARENT_COMMENT_UNAME, PARENT_COMMENT_DTM, PARENT_MEDIA_CONTENT, PARENT_MEDIA_FLAG

 04/30/2020 AST: Added COMMENT_BY_UNAME

*/

CASE WHEN NEW.COMMENT_TYPE = 'CONP' THEN

IF NEW.EMBEDDED_FLAG = 'N' THEN 
INSERT INTO OPN_POST_COMMENTS(COMMENT_ID
, CAUSE_POST_ID
, POST_BY_USERID
, TOPICID
, PARENT_COMMENT_ID
, COMMENT_SEQ
, COMMENT_CONTENT
, COMMENT_BY_USERID
, COMMENT_BY_UNAME
, PARENT_COMMENT_BYUID
, COMMENT_DTM
, COMMENT_UPDATE_DTM
, EMBEDDED_CONTENT
, EMBEDDED_FLAG
, CLEAN_COMMENT_FLAG
, COMMENT_PROCESSED_FLAG
, COMMENT_PROCESSED_DTM
, MEDIA_CONTENT
, MEDIA_FLAG
, COMMENT_TYPE
, PARENT_COMMENT_CONTENT
, PARENT_COMMENT_UNAME
, PARENT_COMMENT_DTM
, PARENT_MEDIA_CONTENT
, PARENT_MEDIA_FLAG  )
VALUES
(NEW.COMMENT_ID
, NEW.CAUSE_POST_ID
, NEW.POST_BY_USERID
, NEW.TOPICID
, NEW.COMMENT_ID
, NEW.COMMENT_SEQ
, NEW.COMMENT_CONTENT
, NEW.COMMENT_BY_USERID
, new.COMMENT_BY_UNAME
, NEW.COMMENT_BY_USERID
, NEW.COMMENT_DTM
, NEW.COMMENT_DTM
, ''
, 'N'
, 'Y'
, 'Y'
, NOW()
, NEW.MEDIA_CONTENT
, NEW.MEDIA_FLAG
, NEW.COMMENT_TYPE
, NEW.COMMENT_CONTENT
, NEW.PARENT_COMMENT_UNAME
, NOW()
, NEW.MEDIA_CONTENT
, NEW.MEDIA_FLAG);


/* 04252018 AST: POST_UPDATE_DTM change begins part 1 */

UPDATE OPN_POSTS SET POST_UPDATE_DTM = NOW() WHERE POST_ID = NEW.CAUSE_POST_ID ;

/* 04252018 AST: POST_UPDATE_DTM change ends part 1 */

ELSE 
INSERT INTO OPN_POST_COMMENTS
(COMMENT_ID
, CAUSE_POST_ID
, POST_BY_USERID
, TOPICID
, PARENT_COMMENT_ID
, COMMENT_SEQ
, COMMENT_CONTENT
, COMMENT_BY_USERID
, COMMENT_BY_UNAME
, PARENT_COMMENT_BYUID
, COMMENT_DTM
, COMMENT_UPDATE_DTM
, EMBEDDED_CONTENT
, EMBEDDED_FLAG
, CLEAN_COMMENT_FLAG
, COMMENT_PROCESSED_FLAG
, COMMENT_PROCESSED_DTM
, MEDIA_CONTENT
, MEDIA_FLAG
, COMMENT_TYPE
, PARENT_COMMENT_CONTENT
, PARENT_COMMENT_UNAME
, PARENT_COMMENT_DTM
, PARENT_MEDIA_CONTENT
, PARENT_MEDIA_FLAG  )
VALUES
(NEW.COMMENT_ID
, NEW.CAUSE_POST_ID
, NEW.POST_BY_USERID
, NEW.TOPICID
, NEW.COMMENT_ID
, NEW.COMMENT_SEQ
, NEW.COMMENT_CONTENT
, NEW.COMMENT_BY_USERID
, NEW.COMMENT_BY_UNAME
, NEW.COMMENT_BY_USERID
, NEW.COMMENT_DTM
, NEW.COMMENT_DTM
, NEW.EMBEDDED_CONTENT
, 'Y'
, 'N'
, 'N'
, NOW()
, NEW.MEDIA_CONTENT
, NEW.MEDIA_FLAG
, NEW.COMMENT_TYPE
, NEW.COMMENT_CONTENT
, NEW.COMMENT_BY_UNAME
, NEW.COMMENT_DTM
, NEW.MEDIA_CONTENT
, NEW.MEDIA_FLAG);

/* 04252018 AST: POST_UPDATE_DTM change begins part 2 
Here the thinking is like this: Even if the CLEAN_COMMENT_FLG keeps the comment unclean, the POST_UPDATE_DTM 
for the CAUSE_POST_ID will get updated no NOW().
This is not in ideal situation - why bump up a post when the comment is unclean?
But this is a quick and 'dirty' way to do it.
In future, we can actually change the CLEAN_COMMENT_FLG itself to add this update statement 
to the update statements in the CLEAN_COMMENT_FLG

*/

UPDATE OPN_POSTS SET POST_UPDATE_DTM = NOW() WHERE POST_ID = NEW.CAUSE_POST_ID ;

/* 04252018 AST: POST_UPDATE_DTM change ends part 2 */

 CALL CLEAN_COMMENT_FLG(NEW.COMMENT_ID);
END IF;

WHEN NEW.COMMENT_TYPE = 'CONC' THEN

IF NEW.EMBEDDED_FLAG = 'N' THEN 
INSERT INTO OPN_POST_COMMENTS(COMMENT_ID
, CAUSE_POST_ID
, POST_BY_USERID
, TOPICID
, PARENT_COMMENT_ID
, COMMENT_SEQ
, COMMENT_CONTENT
, COMMENT_BY_USERID
, COMMENT_BY_UNAME
, PARENT_COMMENT_BYUID
, COMMENT_DTM
, COMMENT_UPDATE_DTM
, EMBEDDED_CONTENT
, EMBEDDED_FLAG
, CLEAN_COMMENT_FLAG
, COMMENT_PROCESSED_FLAG
, COMMENT_PROCESSED_DTM
, MEDIA_CONTENT
, MEDIA_FLAG
, COMMENT_TYPE
, PARENT_COMMENT_CONTENT
, PARENT_COMMENT_UNAME
, PARENT_COMMENT_DTM
, PARENT_MEDIA_CONTENT
, PARENT_MEDIA_FLAG  )
VALUES
(NEW.COMMENT_ID
, NEW.CAUSE_POST_ID
, NEW.POST_BY_USERID
, NEW.TOPICID
, NEW.PARENT_COMMENT_ID
, NEW.COMMENT_SEQ
, NEW.COMMENT_CONTENT
, NEW.COMMENT_BY_USERID
, new.COMMENT_BY_UNAME
, NEW.PARENT_COMMENT_BYUID
, NEW.COMMENT_DTM
, NEW.COMMENT_DTM
, ''
, 'N'
, 'Y'
, 'Y'
, NOW()
, NEW.MEDIA_CONTENT
, NEW.MEDIA_FLAG
, NEW.COMMENT_TYPE
, NEW.PARENT_COMMENT_CONTENT
, NEW.PARENT_COMMENT_UNAME
, NEW.PARENT_COMMENT_DTM
, NEW.PARENT_MEDIA_CONTENT
, NEW.PARENT_MEDIA_FLAG);


/* 04252018 AST: POST_UPDATE_DTM change begins part 1 */

UPDATE OPN_POSTS SET POST_UPDATE_DTM = NOW() WHERE POST_ID = NEW.CAUSE_POST_ID ;

/* 04252018 AST: POST_UPDATE_DTM change ends part 1 */

ELSE 
INSERT INTO OPN_POST_COMMENTS
(COMMENT_ID
, CAUSE_POST_ID
, POST_BY_USERID
, TOPICID
, PARENT_COMMENT_ID
, COMMENT_SEQ
, COMMENT_CONTENT
, COMMENT_BY_USERID
, COMMENT_BY_UNAME
, PARENT_COMMENT_BYUID
, COMMENT_DTM
, COMMENT_UPDATE_DTM
, EMBEDDED_CONTENT
, EMBEDDED_FLAG
, CLEAN_COMMENT_FLAG
, COMMENT_PROCESSED_FLAG
, COMMENT_PROCESSED_DTM
, MEDIA_CONTENT
, MEDIA_FLAG
, COMMENT_TYPE
, PARENT_COMMENT_CONTENT
, PARENT_COMMENT_UNAME
, PARENT_COMMENT_DTM
, PARENT_MEDIA_CONTENT
, PARENT_MEDIA_FLAG  )
VALUES
(NEW.COMMENT_ID
, NEW.CAUSE_POST_ID
, NEW.POST_BY_USERID
, NEW.TOPICID
, NEW.PARENT_COMMENT_ID
, NEW.COMMENT_SEQ
, NEW.COMMENT_CONTENT
, NEW.COMMENT_BY_USERID
, NEW.COMMENT_BY_UNAME
, NEW.PARENT_COMMENT_BYUID
, NEW.COMMENT_DTM
, NEW.COMMENT_DTM
, NEW.EMBEDDED_CONTENT
, 'Y'
, 'N'
, 'N'
, NOW()
, NEW.MEDIA_CONTENT
, NEW.MEDIA_FLAG
, NEW.COMMENT_TYPE
, NEW.PARENT_COMMENT_CONTENT
, NEW.PARENT_COMMENT_UNAME
, NEW.PARENT_COMMENT_DTM
, NEW.PARENT_MEDIA_CONTENT
, NEW.PARENT_MEDIA_FLAG);

/* 04252018 AST: POST_UPDATE_DTM change begins part 2 
Here the thinking is like this: Even if the CLEAN_COMMENT_FLG keeps the comment unclean, the POST_UPDATE_DTM 
for the CAUSE_POST_ID will get updated no NOW().
This is not in ideal situation - why bump up a post when the comment is unclean?
But this is a quick and 'dirty' way to do it.
In future, we can actually change the CLEAN_COMMENT_FLG itself to add this update statement 
to the update statements in the CLEAN_COMMENT_FLG

*/

UPDATE OPN_POSTS SET POST_UPDATE_DTM = NOW() WHERE POST_ID = NEW.CAUSE_POST_ID ;

/* 04252018 AST: POST_UPDATE_DTM change ends part 2 */

 CALL CLEAN_COMMENT_FLG(NEW.COMMENT_ID);
END IF;

END CASE ;

END$$

DELIMITER ; 

-- 

-- COMMENT_CONC_NOTIF_TRIGGER

DELIMITER $$
DROP TRIGGER IF EXISTS COMMENT_CONC_NOTIF_TRIGGER $$
CREATE DEFINER=`opinito`@`%` TRIGGER COMMENT_CONC_NOTIF_TRIGGER
AFTER INSERT ON OPN_POST_COMMENTS for each row
begin

/* 
    08/27/2020 AST: initial creation - to push notif users when there is a COMMENT OR CONC
    ON their post or comment resp.

*/

DECLARE POSTTOPIC, PBYUNAME VARCHAR(30) ;
DECLARE POST_EXCRPT VARCHAR(150) ;
DECLARE KW VARCHAR(300) ;
DECLARE CTYPE VARCHAR(10) ;


CASE WHEN NEW.TOPICID = 1 THEN SET POSTTOPIC = 'Politics' ;
WHEN NEW.TOPICID = 2 THEN SET POSTTOPIC = 'Sports/Games' ;
WHEN NEW.TOPICID = 3 THEN SET POSTTOPIC = 'Science/Tech' ;
WHEN NEW.TOPICID = 4 THEN SET POSTTOPIC = 'Business' ;
WHEN NEW.TOPICID = 5 THEN SET POSTTOPIC = 'Media/Ent.' ;
WHEN NEW.TOPICID = 6 THEN SET POSTTOPIC = 'Religion' ;
WHEN NEW.TOPICID = 7 THEN SET POSTTOPIC = 'Life' ;
WHEN NEW.TOPICID = 8 THEN SET POSTTOPIC = 'Miscellaneous' ;
WHEN NEW.TOPICID = 9 THEN SET POSTTOPIC = 'Trending' ;
WHEN NEW.TOPICID = 10 THEN SET POSTTOPIC = 'Celebrities' ;
WHEN NEW.TOPICID = 11 THEN SET POSTTOPIC = 'Health' ;

END CASE;

SET POST_EXCRPT = (SELECT substring(NEW.COMMENT_CONTENT, 1, 140));
-- SET PBYUNAME = (SELECT USERNAME FROM OPN_USERLIST WHERE USERID = NEW.POST_BY_USERID) ;

CASE WHEN NEW.COMMENT_TYPE = 'CONP' THEN

INSERT INTO OPN_PUSH_LAUNCH(USERID, USER_UUID, APP_TOKEN, USER_PLATFORM, PUSH_TYPE
, PUSH_COUNT, PUSH_TOPIC, SOURCE_ID, POST_EXCERPT, PUSH_TITLE)
SELECT U.USERID, U.USER_UUID, U.IDENTIFIER_TOKEN, U.LAST_USED_PLATFORM, 'COMMENT'
, 1 , POSTTOPIC, NEW.CAUSE_POST_ID, POST_EXCRPT, 'New comment/s on your post in'
FROM OPN_USERLIST U WHERE U.USERID = NEW.POST_BY_USERID;

WHEN NEW.COMMENT_TYPE = 'CONC' THEN

INSERT INTO OPN_PUSH_LAUNCH(USERID, USER_UUID, APP_TOKEN, USER_PLATFORM, PUSH_TYPE
, PUSH_COUNT, PUSH_TOPIC, SOURCE_ID, POST_EXCERPT, PUSH_TITLE)
SELECT U.USERID, U.USER_UUID, U.IDENTIFIER_TOKEN, U.LAST_USED_PLATFORM, 'CONC'
, 1 , POSTTOPIC, NEW.CAUSE_POST_ID, POST_EXCRPT, 'New comment/s on your comment in'
FROM OPN_USERLIST U WHERE U.USERID = NEW.PARENT_COMMENT_BYUID;

END CASE ;


END$$

DELIMITER ; 

-- 

-- POST_COMMENT_DELETE

-- TRIGGER TO INSERT DELETED POST COMMENTS INTO OPN_COMMENTS_DELETED

DELIMITER $$
DROP TRIGGER IF EXISTS POST_COMMENT_DELETE $$
CREATE TRIGGER POST_COMMENT_DELETE 
AFTER DELETE ON OPN_POST_COMMENTS for each row
begin

/*

	07/17/2020 AST: Adding the DELETE from OPN_POST_SEARCH_T to ensure that 
					deleted posts don't show up in search results

*/

INSERT INTO OPN_COMMENTS_DELETED(COMMENT_ID, CAUSE_POST_ID, POST_BY_USERID, TOPICID
, PARENT_COMMENT_ID, COMMENT_SEQ, COMMENT_CONTENT
, COMMENT_BY_USERID, COMMENT_DTM, EMBEDDED_CONTENT, CLEAN_COMMENT_FLAG, UPDATE_DTM ) 
VALUES (OLD.COMMENT_ID, OLD.CAUSE_POST_ID, OLD.POST_BY_USERID, OLD.TOPICID
, OLD.PARENT_COMMENT_ID, OLD.COMMENT_SEQ, OLD.COMMENT_CONTENT
, OLD.COMMENT_BY_USERID, OLD.COMMENT_DTM, OLD.EMBEDDED_CONTENT, OLD.CLEAN_COMMENT_FLAG, NOW());


END$$

DELIMITER ; 

-- 

-- POST_TO_KW_INSERT

-- TRIGGER TO CONVERT POSTS INTO KW

DELIMITER $$
DROP TRIGGER IF EXISTS POST_TO_KW_INSERT $$
CREATE TRIGGER POST_TO_KW_INSERT 
AFTER INSERT ON OPN_USER_POST_ACTION for each row
begin

/*

	02/18/2023 AST: This trigger will convert a Post into a Keyword when any user declares L/H for the post
    
    Things to remember:
    1. Only Posts can get converted to KWs (this table is used for L/H on comments also - but that functionality
    is not yet turned on. If it gets turned on, this trugger will have to be modified.
    2. The post turns into KW only once, the very first time any user gives L/H to the post
    3. Along with turning it into KW, the trigger also needs to add this KID to the user's cart
    4. SInce the user can change or even cancel the L/H anytime, we need to ensure that the KID disappears 
    from the user's cart if the user does NOT have l/h for the post.
    5. This may require a DELETE trigger also on this table - just to delete the entry in the user's cart
    6. Both the actions are best handled by dedicated Procs - the trigger will simply call those procs.
    7. The procs themselves will handle the duplicates and deletions etc. They will also handle the size of 
    the post to KW conversion
       

*/

/* Raw Logging */

INSERT INTO OPN_RAW_LOGS(KEYVALUE_KEY, KEYVALUE_VALUE, LOG_DTM) VALUES(
'POST_TO_KW TRIGGER - CAUSE_POST_ID, TOPICID, ACTION_BY_USERID, POST_ACTION_TYPE, IFNULL(NEW.KEYID, 0)'
, CONCAT(NEW.CAUSE_POST_ID,'-', NEW.TOPICID,'-', NEW.ACTION_BY_USERID,'-', NEW.POST_ACTION_TYPE,'-', IFNULL(NEW.KEYID, 0)), NOW() ) ;

/* End of raw logging */

CALL convertPostToKW(NEW.CAUSE_POST_ID, NEW.TOPICID, NEW.ACTION_BY_USERID, NOW(), NEW.POST_ACTION_TYPE, IFNULL(NEW.KEYID, 0) ) ;

END$$

DELIMITER ; 

-- 

-- POST_ACTION_DELETE

-- TRIGGER TO REMOVE KE FROM ACTION-USER'S CART

DELIMITER $$
DROP TRIGGER IF EXISTS POST_ACTION_DELETE $$
CREATE TRIGGER POST_ACTION_DELETE 
AFTER DELETE ON OPN_USER_POST_ACTION for each row
begin

/*

	02/26/2023 AST: This trigger will remove the KW from the user's cart once the user removes
    his Post Action (L/H)
       

*/

DELETE FROM OPN_USER_CARTS WHERE OPN_USER_CARTS.USERID = OLD.ACTION_BY_USERID AND OPN_USER_CARTS.KEYID = OLD.KEYID ;

/* Raw Logging */

INSERT INTO OPN_RAW_LOGS(KEYVALUE_KEY, KEYVALUE_VALUE, LOG_DTM) VALUES(
'POST ACTION DELETE TRIGGER - Cart Deleted: ACTION_BY_USERID,OLD.KEYID'
, CONCAT(OLD.ACTION_BY_USERID,'-', OLD.KEYID), NOW() ) ;

/* End of raw logging */

INSERT INTO OPN_UPA_DELETED(OLD_ROW_ID, ACTION_BY_USERID, POST_BY_USERID, POST_ACTION_TYPE, POST_ACTION_DTM, CAUSE_POST_ID, TOPICID, ACTY_CODE, UPDATE_DTM) 
VALUES (OLD.ROW_ID, OLD.ACTION_BY_USERID, OLD.POST_BY_USERID, OLD.POST_ACTION_TYPE, OLD.POST_ACTION_DTM, OLD.CAUSE_POST_ID
, OLD.TOPICID, OLD.ACTY_CODE, NOW());

END$$

DELIMITER ; 

-- 

-- NEW_USER_CART_DELETE

DELIMITER $$
DROP TRIGGER IF EXISTS NEW_USER_CART_DELETE $$
CREATE DEFINER=`opinito`@`%` TRIGGER NEW_USER_CART_DELETE 
AFTER DELETE ON OPN_USER_CARTS for each row
begin

/* 06/14/2020 AST : removed the final Cluster Line from below */
-- DELETE FROM OPN_NEW_USER_CARTS WHERE OPN_NEW_USER_CARTS.OUC_ROW_ID = OLD.ROW_ID;

-- DELETE FROM OPN_NC_CLUSTERS WHERE OPN_NC_CLUSTERS.USERID = OLD.USERID AND OPN_NC_CLUSTERS.TOPICID = OLD.TOPICID;

-- DELETE FROM OPN_USER_CLUSTERS WHERE OPN_USER_CLUSTERS.USERID = OLD.USERID AND OPN_USER_CLUSTERS.TOPICID = OLD.TOPICID;

INSERT INTO OPN_CART_ARCHIVE(OLD_CART_ID, USERID, TOPICID, CART, KEYID, CREATION_DTM, DELETE_DTM)
VALUES(OLD.ROW_ID, OLD.USERID, OLD.TOPICID, OLD.CART, OLD.KEYID, OLD.CREATION_DTM, NOW());

END$$

DELIMITER ; 

-- 


