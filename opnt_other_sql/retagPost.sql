-- retagPost
 
 
DELIMITER //
DROP PROCEDURE IF EXISTS retagPost //
CREATE PROCEDURE retagPost(postid INT, TID INT, CCODE VARCHAR(5), oldtag1 INT)
thisproc: BEGIN

/* 05/15/2021 AST: This proc is created for re-tagging the posts that have been wrongly tagged due to faulty scrape designs
We will create a cursor for L1-L6 and NL1-NL3 - with DESC order of OPN_KW_TAGS.SCRAPE_DESIGN_DTM for the TID of the postid
Then we will check for match with each set with the post_content. 
If we find a match (and no match with NL1-NL3) then we will take that KID and use it as the new TAG1_KEYID

*/

DECLARE newTKID, DUMMYVAR, altTAGID, T1,T2,T3,T4,T5,T8,T9,T10 INT;
DECLARE postContent VARCHAR(5000) ;
DECLARE L1,L2,L3,L4,L5,L6, STAG2 VARCHAR(60) ;
  DECLARE DONE INT DEFAULT FALSE;
  DECLARE CURSOR_I CURSOR FOR  SELECT KEYID, IFNULL(LIKE1, 'JQXXWZ'), IFNULL(LIKE2, 'JQXXWZ'), IFNULL(LIKE3, 'JQXXWZ')
  , IFNULL(LIKE4, 'JQXXWZ'), IFNULL(LIKE5, 'JQXXWZ'), IFNULL(LIKE6, 'JQXXWZ'), SCRAPE_TAG2 FROM OPN_KW_TAGS 
  WHERE TOPICID = TID AND COUNTRY_CODE = CCODE AND SCRAPE_DESIGN_DONE = 'Y' ORDER BY KEYID DESC ;

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
  OPEN CURSOR_I;
   READ_LOOP: LOOP
    FETCH CURSOR_I INTO newTKID, L1,L2,L3,L4,L5,L6, STAG2;
     IF DONE THEN
      LEAVE READ_LOOP;
      END IF;
      
 SELECT POST_CONTENT INTO postContent FROM OPN_POSTS WHERE POST_ID = postid ;
 
CASE WHEN TID = 1 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'POLNEWS' ) ;
WHEN TID = 2 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'sportsnews2' ) ;
WHEN TID = 3 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'sciencenews3' ) ;
WHEN TID = 4 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'businessnews4' ) ;
WHEN TID = 5 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'entertainmentnews5' ) ;
WHEN TID = 8 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'opnt' ) ;
WHEN TID = 9 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'trendingnews9' ) ;
WHEN TID = 10 THEN
SET altTAGID = (SELECT KEYID FROM OPN_P_KW WHERE SCRAPE_TAG2 = 'CELEBNEWS' ) ;
END CASE ;
 
CASE WHEN (postContent LIKE L1 OR postContent LIKE L2 OR postContent LIKE L3 OR postContent LIKE L4 OR postContent LIKE L5 OR postContent LIKE L6) THEN 
UPDATE OPN_POSTS_RAW SET TAG1_KEYID = newTKID, STP_PROC_NAME = CONCAT('retagPost', '-', oldtag1, '-', newTKID) WHERE POST_ID = postid;

INSERT INTO OPN_POST_RETAG_RECORD(TOPICID, POST_ID, OLD_TAG1_KID, NEW_TAG1_KID, RETAG_DTM)
VALUES (TID, postid, oldtag1, newTKID, NOW()) ON DUPLICATE KEY UPDATE NEW_TAG1_KID = newTKID, RETAG_DTM = NOW() ;

LEAVE thisproc ;

WHEN (postContent NOT LIKE L1 AND postContent NOT LIKE L2 AND postContent NOT LIKE L3 AND postContent NOT LIKE L4 AND postContent NOT LIKE L5 AND postContent NOT LIKE L6) 
THEN SET DUMMYVAR = 1 ;
UPDATE OPN_POSTS_RAW SET TAG1_KEYID = altTAGID, STP_PROC_NAME = CONCAT('retagPost', '-', oldtag1, '-', altTAGID) WHERE POST_ID = postid;

INSERT INTO OPN_POST_RETAG_RECORD(TOPICID, POST_ID, OLD_TAG1_KID, NEW_TAG1_KID, RETAG_DTM)
VALUES (TID, postid, oldtag1, altTAGID, NOW()) ON DUPLICATE KEY UPDATE NEW_TAG1_KID = altTAGID, RETAG_DTM = NOW() ;

INSERT INTO RETAG_TEMP(POSTID, KEYID, LIKE1, LIKE2, NL1,CCD) VALUES (postid, KEYID, L1, L2, NL1, CCODE) ;

END CASE ;

        END LOOP;
  CLOSE CURSOR_I;
END; //
 DELIMITER ;
 
 -- 