-- getPostsByUserNameANTI

-- USE `opntprod`;
DROP procedure IF EXISTS `getPostsByUserNameANTI`;

DELIMITER $$
-- USE `opntprod`$$
CREATE DEFINER=`root`@`%` PROCEDURE `getPostsByUserNameANTI`(userid varchar(45), topicid INT  , fromindex INT, toindex INT
)
thisproc: BEGIN

/*  
 08/11/2020 Kapil: Confirmed
 	09/22/2020 AST: Adding GGG to the CCODE exclusion
    this is because the SCIENCE news is getting STP to GGG users only
    
    04/06/2021 INSERTING THE SUSPENDED USER EXCLUSION
 */

declare  orig_uid, TIDCNT, LASTTID, CARTCNT INT;
DECLARE UNAME VARCHAR(30) ;
DECLARE CDTM DATETIME ;
DECLARE CCODE, SUSPFLAG VARCHAR(5) ;

SELECT UL.USERID, UL.USERNAME, UL.COUNTRY_CODE, UL.USER_SUSPEND_FLAG
INTO orig_uid, UNAME, CCODE, SUSPFLAG FROM OPN_USERLIST UL WHERE UL.USER_UUID = userid ;

/* Adding user action logging portion */

INSERT INTO OPN_USER_BHV_LOG(USERNAME, USERID, USER_UUID, LOGIN_DTM, API_CALL, CONCAT_PARAMS)
VALUES(UNAME, orig_uid, userid, NOW(), 'getPostsByUserNameANTI', CONCAT(topicid,'-',toindex));


/* end of use action tracking */

-- SET NAMES utf8;

/* 04242018 AST:

Added , P.POST_UPDATE_DTM so that the instream can be ordered by the latest updated posts

-- To Do: Add a trigger on the comments table to update the POST_UPDATE_DTM for posts 
whenever there is a comment on the post
This will ensure that the active posts are always on the top and the users don't 
have to keep searching for them

 05/15/2019 AST: changed the overall ordering of posts to POST_ID DESC (LAST ROW IN SQL). 
 Removed the POST_DATETIME AND TOTAL_NS from ordering
 07/10/2019 AST: Changed the ordering of posts to handle the following case:
 When a user changed the cart (adding new KW) then the instream woeldn't change 
 unless the KW was completely new. Now the proc uses the LAST_UPDATE_DTM of 
 the OPN_USER_CART to decide the ordering of the posts when the last_dtm is in the last 24 hours
 
 10/29/2019 AST: Changing the CDTM logic. This is because of the case where a user 
 removes all kw for an interest. At that time, the CDTM becomes null and the proc fails. 
 Hence, when the topicid that is passed to the proc has no cart elements (that means the user has no 
 kws selected in that topic) then we will take the last available kW's topic.
 If the user does not have any cart whatsoever, then we will simply exit the proc - to avoid a failure
 
 12/17/2019 AST: Removed @ from code

*/
/*26-03-2020: - Rohit: -Added the dp_url into the select statement */
/* 04/22/2020 AST: Repurposing this proc as getPostsByUserNameNW */
/* 06/03/2020 AST: Rebuilt and added COMMENT_DELETE_FLAG = 'N' to comment counts  */

/* 	06/30/2020 AST: Adding CCODE to the SQL so that USA doesn't get IND posts and vice versa  
	ALSO removing OR P.POST_BY_USERID = orig_uid - SO that only clean posts are visible - even to the postor	
    
    07/09/2020 AST: Adding the handling of the following: We want to restrict the instream where 
    the ccode of the postor matches the ccode of the user - but only for BOT posts
    
    If a non-BOT user makes a post from a different ccode - but has the same keyid in cart,
    then that non-BOT post should be visible - and counted - by the user    */
    
/* 	11/08/2020 AST: Now the non-clean posts are being changed to a standard warning replacement. 
	Hence, removing the filter P.CLEAN_POST_FLAG = 'Y' AND from all cases below 
 
 04/06/2021 AST: SUSPENDED USER EXCLUSION

    */

SET CARTCNT = (SELECT COUNT(DISTINCT T1.TOPICID) 
FROM OPN_USER_CARTS T1 WHERE T1.USERID = orig_uid) ;

/* 04/06/2021 INSERTING THE SUSPENDED USER EXCLUSION BELOW */
CASE WHEN SUSPFLAG = 'Y' THEN LEAVE thisproc ;
WHEN SUSPFLAG <> 'Y' THEN
/* 04/06/2021 END OF THE SUSPENDED USER EXCLUSION */

CASE WHEN CARTCNT = 0 THEN LEAVE thisproc ;

WHEN CARTCNT > 0 THEN

SET TIDCNT = (SELECT COUNT(*) FROM OPN_USER_CARTS C1 
WHERE C1.USERID = orig_uid AND C1.TOPICID = topicid) ;

CASE WHEN TIDCNT > 0 THEN 
SET CDTM = (SELECT MAX(OUC.LAST_UPDATE_DTM) FROM OPN_USER_CARTS OUC 
WHERE OUC.USERID = orig_uid AND OUC.TOPICID = topicid) ;
SET LASTTID = topicid ;


WHEN TIDCNT <= 0 THEN
SET LASTTID = (SELECT MAX(TT3.TOPICID) FROM OPN_USER_CARTS TT3 
WHERE TT3.USERID = orig_uid) ;
SET CDTM = (SELECT MAX(OUC.LAST_UPDATE_DTM) FROM OPN_USER_CARTS OUC 
WHERE OUC.USERID = orig_uid AND OUC.TOPICID = LASTTID) ;

END CASE ;
END CASE ;

CASE WHEN CDTM < NOW() - INTERVAL 1 DAY THEN 

SELECT INSTREAM.POST_ID, INSTREAM.TOPICID, INSTREAM.POST_DATETIME, INSTREAM.POST_BY_USERID
, OU.USERNAME,OU.DP_URL,INSTREAM.MEDIA_CONTENT,INSTREAM.MEDIA_FLAG, INSTREAM.POST_CONTENT, INSTREAM.TOTAL_NS 
, IFNULL(POST_LHC.LCOUNT,0) LCOUNT, IFNULL(POST_LHC.HCOUNT,0) HCOUNT, UP.POST_ACTION_TYPE 
, UUA.ACTION_TYPE UU_ACTION, OPC.POST_COMMENT_COUNT
FROM (
SELECT P.POST_ID, P.TOPICID, P.POST_DATETIME, P.POST_UPDATE_DTM
, P.POST_BY_USERID, P.POST_CONTENT, UN.TOTAL_NS, P.MEDIA_CONTENT, P.MEDIA_FLAG
FROM OPN_POSTS P
, (SELECT B.USERID, B.BOT_FLAG, A.TOPICID, COUNT(*) TOTAL_NS FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 
WHERE C1.USERID = orig_uid) A ,
(SELECT C2.USERID, CU.BOT_FLAG, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM 
FROM OPN_USER_CARTS C2, OPN_USERLIST CU WHERE C2.USERID = CU.USERID AND
 C2.USERID NOT IN (SELECT OUUA.ON_USERID FROM OPN_USER_USER_ACTION OUUA 
 WHERE OUUA.BY_USERID = orig_uid 
AND OUUA.TOPICID = LASTTID AND OUUA.ACTION_TYPE = 'KO')) B 
WHERE A.TOPICID = B.TOPICID AND A.CART <> B.CART 
AND A.KEYID = B.KEYID AND A.TOPICID = LASTTID
GROUP BY B.USERID, B.BOT_FLAG, A.TOPICID ORDER BY  COUNT(*) DESC ) UN
WHERE UN.USERID = P.POST_BY_USERID
AND UN.TOPICID = P.TOPICID
-- AND P.POST_DATETIME >= CURRENT_DATE - INTERVAL 200 DAY
/* 04/18/2019 AST: Adding the condition below: This is to ensure that the users don't get spammed with the STP posts
that do not belong to the KWs outside the user's carts 
    05/01/2019 AST:  Added kk as table identifier to avoid confusion */
AND (P.TAG1_KEYID IS NULL OR P.TAG1_KEYID IN 
(SELECT KK.KEYID FROM OPN_USER_CARTS KK WHERE KK.USERID = orig_uid))
/* End of 04/18/2019 addition 
    End of 05/01/2019 modification */
AND ( -- P.CLEAN_POST_FLAG = 'Y' AND 
(CASE WHEN UN.BOT_FLAG = 'Y' 
THEN  P.POSTOR_COUNTRY_CODE IN ( CCODE, 'GGG') ELSE P.POSTOR_COUNTRY_CODE NOT IN ('PQR')  END ) )
) INSTREAM
INNER JOIN OPN_USERLIST OU
ON INSTREAM.POST_BY_USERID = OU.USERID
LEFT OUTER JOIN 
(SELECT CAUSE_POST_ID, SUM(CASE WHEN POST_ACTION_TYPE = 'L' THEN 1 ELSE 0 END) LCOUNT 
, SUM(CASE WHEN POST_ACTION_TYPE = 'H' THEN 1 ELSE 0 END) HCOUNT 
FROM OPN_USER_POST_ACTION GROUP BY CAUSE_POST_ID) POST_LHC
ON INSTREAM.POST_ID = POST_LHC.CAUSE_POST_ID
LEFT OUTER JOIN OPN_USER_POST_ACTION UP ON INSTREAM.POST_ID = UP.CAUSE_POST_ID 
AND UP.ACTION_BY_USERID = orig_uid 
LEFT OUTER JOIN OPN_USER_USER_ACTION UUA ON INSTREAM.POST_BY_USERID = UUA.ON_USERID 
AND UUA.BY_USERID = orig_uid
LEFT OUTER JOIN (SELECT CAUSE_POST_ID, COUNT(*) POST_COMMENT_COUNT FROM OPN_POST_COMMENTS 
WHERE CLEAN_COMMENT_FLAG = 'Y' AND COMMENT_DELETE_FLAG = 'N' GROUP BY CAUSE_POST_ID) OPC 
ON INSTREAM.POST_ID = OPC.CAUSE_POST_ID
ORDER BY POST_ID DESC  LIMIT fromindex, toindex
;

WHEN  CDTM >= NOW() - INTERVAL 1 DAY THEN

SELECT INSTREAM.POST_ID, INSTREAM.TOPICID, INSTREAM.POST_DATETIME, INSTREAM.POST_BY_USERID
, OU.USERNAME,OU.DP_URL,INSTREAM.MEDIA_CONTENT,INSTREAM.MEDIA_FLAG, INSTREAM.POST_CONTENT, INSTREAM.CART_DTM TOTAL_NS
, IFNULL(POST_LHC.LCOUNT,0) LCOUNT, IFNULL(POST_LHC.HCOUNT,0) HCOUNT, UP.POST_ACTION_TYPE 
, UUA.ACTION_TYPE UU_ACTION, OPC.POST_COMMENT_COUNT
FROM (
SELECT P.POST_ID, P.TOPICID, P.POST_DATETIME, P.POST_UPDATE_DTM
, IFNULL(UC.LAST_UPDATE_DTM, P.POST_UPDATE_DTM) CART_DTM
, P.POST_BY_USERID, P.TAG1_KEYID, K.KEYWORDS, P.POST_CONTENT, UN.TOTAL_NS, P.MEDIA_CONTENT, P.MEDIA_FLAG
FROM OPN_POSTS P
LEFT OUTER JOIN OPN_P_KW K ON P.TAG1_KEYID = K.KEYID
LEFT OUTER JOIN  OPN_USER_CARTS UC ON P.TAG1_KEYID = UC.KEYID AND UC.USERID = orig_uid
, (SELECT B.USERID, B.BOT_FLAG, A.TOPICID, COUNT(*) TOTAL_NS FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid) A ,
(SELECT C2.USERID, CU.BOT_FLAG, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM 
FROM OPN_USER_CARTS C2, OPN_USERLIST CU WHERE C2.USERID = CU.USERID AND
 C2.USERID NOT IN (SELECT OUUA.ON_USERID FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid 
AND OUUA.TOPICID = LASTTID AND OUUA.ACTION_TYPE = 'KO')) B 
WHERE A.TOPICID = B.TOPICID AND A.CART <> B.CART AND A.KEYID = B.KEYID AND A.TOPICID = LASTTID 
GROUP BY B.USERID, B.BOT_FLAG, A.TOPICID -- ORDER BY  COUNT(*) DESC 
) UN
WHERE UN.USERID = P.POST_BY_USERID
AND UN.TOPICID = P.TOPICID
-- AND P.POST_BY_USERID = UC.USERID
-- AND P.POST_DATETIME >= CURRENT_DATE - INTERVAL 200 DAY
/* 04/18/2019 AST: Adding the condition below: This is to ensure that the users don't get spammed with the STP posts
that do not belong to the KWs outside the user's carts 
    05/01/2019 AST:  Added kk as table identifier to avoid confusion */
AND (P.TAG1_KEYID IS NULL OR P.TAG1_KEYID IN (SELECT KK.KEYID FROM OPN_USER_CARTS KK WHERE KK.USERID = orig_uid))
/* End of 04/18/2019 addition 
    End of 05/01/2019 modification */
AND ( -- P.CLEAN_POST_FLAG = 'Y' AND 
(CASE WHEN UN.BOT_FLAG = 'Y' 
THEN  P.POSTOR_COUNTRY_CODE IN ( CCODE, 'GGG') ELSE P.POSTOR_COUNTRY_CODE NOT IN ('PQR')  END ) )
) INSTREAM
INNER JOIN OPN_USERLIST OU
ON INSTREAM.POST_BY_USERID = OU.USERID
LEFT OUTER JOIN 
(SELECT CAUSE_POST_ID, SUM(CASE WHEN POST_ACTION_TYPE = 'L' THEN 1 ELSE 0 END) LCOUNT 
, SUM(CASE WHEN POST_ACTION_TYPE = 'H' THEN 1 ELSE 0 END) HCOUNT 
FROM OPN_USER_POST_ACTION GROUP BY CAUSE_POST_ID) POST_LHC
ON INSTREAM.POST_ID = POST_LHC.CAUSE_POST_ID
LEFT OUTER JOIN OPN_USER_POST_ACTION UP ON INSTREAM.POST_ID = UP.CAUSE_POST_ID AND UP.ACTION_BY_USERID = orig_uid 
LEFT OUTER JOIN OPN_USER_USER_ACTION UUA ON INSTREAM.POST_BY_USERID = UUA.ON_USERID AND UUA.BY_USERID = orig_uid
LEFT OUTER JOIN (SELECT CAUSE_POST_ID, COUNT(*) POST_COMMENT_COUNT FROM OPN_POST_COMMENTS 
WHERE CLEAN_COMMENT_FLAG = 'Y' AND COMMENT_DELETE_FLAG = 'N' GROUP BY CAUSE_POST_ID) OPC 
ON INSTREAM.POST_ID = OPC.CAUSE_POST_ID
ORDER BY CART_DTM DESC, POST_ID DESC  LIMIT fromindex, toindex
;

END CASE ;

END CASE ; -- THIS IS THE SUSPFLAG CASE END
  
END$$

DELIMITER ;

-- 