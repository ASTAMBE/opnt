-- networkUpdate

-- networkUpdate FOR BUILDING THE POST COUNTS UPDATES

DELIMITER //
DROP PROCEDURE IF EXISTS networkUpdate //
CREATE PROCEDURE networkUpdate(userid varchar(45))

begin 
declare  orig_uid INT;
DECLARE APPNAME VARCHAR(30) ;

/* OPN_NW_STATS is the main table that provides the data for the networkUpdate proc

networkUpdate proc is for: Updating the OPN_NW_STATS for each individual user. This table 
supplies the data to the myActivity and profilephp procs.
myActivity provides the data to the Activity Screen in the app. This screen tells the user:
- The network size for his network for all the interests in which he has some cart (L/H)
- One stop place for all his:
	- Posts
    - Comments
    - Bookmarks
- It also provides a count of new posts in the network for each interest

OPN_NW_STATS works on the two-state basis. It has a current state (T2) and 
a previous state (T1). The diff bewn the two gives the count of new posts

The OPN_NW_STATS right from the time of the user creation. As soon as a user is created
OPN_NW_STATS gets 10 rows for that user - corrsp. to the 10 interests. At this time,
both T1 and T2 states are initialized to zero.

As soon as the new user saves any cart (in the initial state, we are default assigning 
the XYZNews KWs to all users - which automatically gives them a large network), the 
user will have some network. But the OPN_NW_STATS gets updated only when the user visits
the Activity or Profile screens (only myActivity and profilephp procs update the table)

How does the table update work ? it is a very complicated process. Lets describe below:

*/

/* Step 1: In the first step, T2 state is copied onto the T1 state. This ensures that
the T1 has the before-the-update counts
, because the subsequent step will bring the latest numbers (network size, and in-nw
post counts) and update them into T2 state.

Step 2: In this step, we just update the network counts for all the interests wherever
the user has cart. This is done as the prior step (prior to the update of post counts)
because this update sql is easy (it just takes the network size for all the non-empty
carts and updates it for this user)

Step 3: In this step, for each interest (topicid), we find the number of posts in the user's
network - we take only the top 1000 users by network strength and their posts 
- because otherwise the sql becomes too slow - and ensure that we are removing the 
kicked-out users before counting the NW posts. This step generates the count of in-NW posts
for each topicid (even if it doesn't have a cart - it will simply bring 0 for the postcount
for these interests) and updates it into T2.

Step 4: Now that the T1 and T2 are calculated, the myActivity and profilephp will 
find the diff betwn the two states T1 and T2 and provide the counts

NOTE: If you want to count the true network (which ignores the XYXNEws KWs) then 
you need to uncomment the following line from all the 11 places where it is used



*/

/* 11/23/2021 AST:  aDDED THE APP-BASED CODE - IF APP IS 'DB8-IND-POL' THEN REMOVE THE POLITICS NEWS
FROM THE NETWORK CALCULATIONS  */

SELECT OU.USERID INTO orig_uid FROM OPN_USERLIST OU WHERE OU.USER_UUID = userid ;
-- SELECT APP_NAME INTO APPNAME FROM OPN_APP_PARAMS ;

UPDATE OPN_NW_STATS A SET A.NW_COUNT_T1 = A.NW_COUNT_T2, A.NWP_COUNT_T1 = A.NWP_COUNT_T2, A.NW_T1_DTM = A.NW_T2_DTM 
WHERE A.USERID = orig_uid ;

/* 04/12/2019 AST: The following UPDATE (setting all topics NW_COUNT_T2 = 0 is added.
This is because when a user kills an entire interest cart, the profile page Network Size 
was not reflecting 0 for that topic. 
That was because the BNET query from the SQL does bring only the latest topics in the user's cart
but the UPADATE does not reset to zero the interest that has been killed.

*/

UPDATE OPN_NW_STATS ONW SET ONW.NW_COUNT_T2 = 0 WHERE ONW.USERID = orig_uid ;

/* 04/12/2019 End of the addition of update to fix the kill-cart problem mentioned above */ 

/* BRANCHING BELOW: IF THE APP IS DB8-IND-POL THEN IT FILTERS OUT THE POLITICS NEWS -BASED NETWORKS
*/

UPDATE OPN_NW_STATS S1, 
/* Start of query BB: BB provides the postCount for a given topicid
    There are 10 identical statements - one for each topicid
    BB itself is a join between NWLIM and OPN_POSTS. 
    NWLIM (short for LIMitedNetWork) is, in turn, an outer join between BNET and KO
    BNET is the Basic Network - It provides all the USERIDs that are in network with the orig_uid for each topicid
    KO  provides the list of USERIDs that are kicked out by orig_uid   
    
    04/19/2019 AST: Currently the NWLIM has arbitrarily imposed limit where it brings only the latest 1000 users in the network
    in order to calculate the total num of posts thatorig_uid has access to.
    
    It also doesn't impose the limit of having only those TAG1_KEYIDs that are in orig_uid cart.
    
    If we want to do the actual perfect count of posts in the network then do the following 2 steps:
    
    1. Remove the LIMIT 1000 portion at the end of the NWLIM - for each topicid
    2. Add the following line 
    AND (P.TAG1_KEYID IS NULL OR P.TAG1_KEYID IN (SELECT KEYID FROM OPN_USER_CARTS WHERE USERID = 1002220 )) 
    
    as shown below: For each Topic
    
    WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY 
    
    
    AND (P.TAG1_KEYID IS NULL OR P.TAG1_KEYID IN (SELECT KEYID FROM OPN_USER_CARTS WHERE USERID = 1002220 )) 


    GROUP BY NWLIM.TOPICID 
    
    */
(SELECT BNET.TOPICID, COUNT(DISTINCT BNET.USERID) NWCOUNT FROM 
(SELECT DISTINCT A.TOPICID, B.USERID  FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE 1=1) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID) BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND OUUA.ACTION_TYPE = 'KO' ) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' GROUP BY BNET.TOPICID) NCNT 
SET S1.NW_COUNT_T2 = NCNT.NWCOUNT WHERE S1.TOPICID = NCNT.TOPICID AND S1.USERID = orig_uid;

UPDATE OPN_NW_STATS AA, (
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 1
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 1) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 1) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 2
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 2) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 2) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 3
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 3) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 3) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 4
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 4) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 4) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 5
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 5) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 5) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 6
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 6) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 6) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 7
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 7) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 7) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 8
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 8) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 8) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 9
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 9) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 9) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
UNION ALL
SELECT NWLIM.TOPICID, COUNT(P.POST_ID) PCT FROM 
(SELECT BNET.TOPICID, BNET.USERID, BNET.NWSTRENGTH, IFNULL(KO.ACTION_TYPE, 'INNW') ACTION_TYPE FROM 
-- start of query BNET
(SELECT  A.TOPICID, B.USERID, COUNT(B.ROW_ID) NWSTRENGTH FROM
(SELECT C1.USERID, C1.TOPICID, C1.CART, C1.KEYID FROM OPN_USER_CARTS C1 WHERE C1.USERID = orig_uid AND C1.TOPICID = 10
-- AND C1.KEYID NOT IN (SELECT KEYID FROM OPN_P_KW WHERE IFNULL(NEWS_ONLY_FLAG, 'N') = 'Y')
) A ,
(SELECT C2.ROW_ID, C2.USERID, C2.TOPICID, C2.CART, C2.KEYID, C2.CREATION_DTM FROM OPN_USER_CARTS C2 WHERE C2.TOPICID = 10) B 
WHERE A.TOPICID = B.TOPICID AND A.CART = B.CART AND A.KEYID = B.KEYID  
GROUP BY A.TOPICID, B.USERID ORDER BY COUNT(B.ROW_ID) DESC ) BNET
-- end of query BNET
LEFT OUTER JOIN 
(SELECT OUUA.TOPICID, OUUA.ON_USERID, OUUA.ACTION_TYPE  FROM OPN_USER_USER_ACTION OUUA WHERE OUUA.BY_USERID = orig_uid
AND  OUUA.ACTION_TYPE = 'KO'  AND OUUA.TOPICID = 10) KO
ON BNET.USERID = KO.ON_USERID AND BNET.TOPICID = KO.TOPICID
WHERE IFNULL(KO.ACTION_TYPE, 'INNW') <> 'KO' ORDER BY BNET.NWSTRENGTH DESC, BNET.USERID DESC LIMIT 1000 ) NWLIM
LEFT OUTER JOIN OPN_POSTS P
ON NWLIM.USERID = P.POST_BY_USERID AND NWLIM.TOPICID = P.TOPICID 
WHERE P.CLEAN_POST_FLAG = 'Y' -- AND P.POST_DATETIME > NOW() - INTERVAL 300 DAY
GROUP BY NWLIM.TOPICID 
) BB
SET AA.NWP_COUNT_T2 = BB.PCT
WHERE AA.USERID = orig_uid AND AA.TOPICID = BB.TOPICID ;

END //
DELIMITER ;

-- 